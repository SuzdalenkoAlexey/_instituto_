Estucturas y excepciones
La programación estructurada es un paradigma de programación que se basa en la ejecución secuencial de instrucciones en bloques estructurados como: secuencia, selección y repetición. Este enfoque promueve la claridad y la legibilidad del código, haciendo más fácil el mantenimiento y la depuración del programa.
Además de las estructuras básicas de la programación estructurada, también se pueden utilizar las excepciones para manejar situaciones inesperadas que puedan ocurrir durante la ejecución del programa. Las excepciones son eventos que interrumpen el flujo normal de ejecución y pueden ser causadas por errores de programación, errores en la entrada de datos, o condiciones externas imprevistas.
En Java, la programación estructurada con excepciones se logra utilizando bloques de código try-catch. La estructura es la siguiente:

```
try {
   // Código que puede generar una excepción
} catch (ExcepcionTipo1 e1) {
   // Manejo de la excepción tipo 1
} catch (ExcepcionTipo2 e2) {
   // Manejo de la excepción tipo 2
} finally {
   // Bloque opcional para ejecutar código sin importar si hay una excepción o no
}
```

En el bloque try se coloca el código que potencialmente puede generar una excepción. Si alguna excepción ocurre dentro de este bloque, se captura y se redirige al bloque catch correspondiente. Cada catch puede manejar un tipo específico de excepción, y se pueden colocar varios bloques catch para manejar diferentes tipos de excepciones.

El bloque finally es opcional y se utiliza para ejecutar código que debe ejecutarse sin importar si se ha lanzado una excepción o no. Este bloque es útil para liberar recursos o realizar tareas de limpieza antes de que el programa termine.

Además de try-catch, también existe la posibilidad de lanzar una excepción manualmente utilizando la palabra clave throw. Por ejemplo:

```
public int dividir(int a, int b) throws ArithmeticException {
   if(b == 0) {
      throw new ArithmeticException("División por cero no está permitida");
   }
   return a / b;
}
```

En este ejemplo, si el divisor es cero, se lanza una excepción de tipo ArithmeticException con un mensaje descriptivo.

La programación estructurada con excepciones es una técnica poderosa para manejar situaciones inesperadas en un programa. Permite que el programa maneje errores de manera elegante y continúe su ejecución normal, proporcionando una experiencia mejorada para el usuario final.

La programación estructurada con excepciones es un enfoque que se utiliza en el lenguaje de programación Java para manejar las excepciones de una manera estructurada y controlada. Una excepción es un evento que ocurre durante la ejecución de un programa y que interrumpe el flujo normal de la ejecución.

En Java, las excepciones se manejan utilizando bloques try-catch, que permiten capturar y manejar las excepciones que puedan ocurrir en el código. El bloque try se utiliza para envolver el código que puede generar una excepción, mientras que el bloque catch se utiliza para especificar el tipo de excepción que se desea capturar y cómo manejarla.

El flujo de ejecución normal del programa se interrumpe cuando se produce una excepción. El código dentro del bloque try se ejecutará hasta que se produzca una excepción. En ese momento, el flujo de ejecución pasa al bloque catch correspondiente al tipo de excepción generada.

En Java, las excepciones se representan mediante objetos de las clases derivadas de la clase Exception. Estas clases derivadas contienen información sobre el tipo de excepción y pueden contener información adicional relacionada con la excepción.

Además de los bloques try-catch, también se puede utilizar el bloque finally. El bloque finally se utiliza para indicar un código que debe ejecutarse siempre, independientemente de si se ha producido una excepción o no. Por ejemplo, en un bloque finally puede utilizarse para cerrar recursos abiertos, como archivos o conexiones de red.

Para utilizar la programación estructurada con excepciones en Java, se deben seguir los siguientes pasos:

1. Identificar el código que puede generar una excepción.
2. Envolver ese código dentro de un bloque try.
3. Dentro del bloque try, especificar los diferentes bloques catch para capturar y manejar las excepciones.
4. Opcionalmente, utilizar un bloque finally para ejecutar un código que debe ejecutarse siempre.

Por ejemplo, consideremos el siguiente código que intenta abrir un archivo y leer su contenido:

```
import java.io.*;

public class EjemploExcepciones {
    public static void main(String[] args) {
        try {
            File archivo = new File("archivo.txt");
            FileReader lector = new FileReader(archivo);
            BufferedReader buffer = new BufferedReader(lector);
            String linea;

            while ((linea = buffer.readLine()) != null) {
                System.out.println(linea);
            }

            buffer.close();
        } catch (IOException e) {
            System.out.println("Error al leer el archivo: " + e.getMessage());
        } finally {
            System.out.println("Fin del programa");
        }
    }
}
```

En este ejemplo, el código que puede generar una excepción se encuentra dentro del bloque try. Si se produce una excepción del tipo IOException al intentar abrir el archivo, el flujo de ejecución pasará al bloque catch correspondiente, donde se muestra un mensaje de error. El bloque finally se utilizará para imprimir un mensaje de finalización del programa, independientemente de si se ha producido una excepción o no.

La programación estructurada con excepciones en Java permite manejar las excepciones de una manera estructurada y controlada, lo que facilita la identificación y resolución de problemas en el código. Sin embargo, es importante utilizar correctamente los bloques try-catch y asegurarse de que las excepciones sean manejadas adecuadamente.

OBJETOS
Un objeto en Java es una instancia de una clase. Una clase en Java es un plano o una plantilla que define características y comportamientos de los objetos.

Un objeto en Java tiene tres características fundamentales:

1. Está caracterizado por su estado: esto se refiere a los valores almacenados en los campos del objeto en un momento dado. Los campos son variables miembro de la clase que almacenan datos específicos para cada objeto.

2. Tiene un comportamiento: esto está determinado por los métodos definidos en la clase. Los métodos representan acciones que el objeto puede realizar y pueden ser invocados para realizar tareas específicas.

3. Tiene una identidad única: cada objeto tiene una identificación única que lo distingue de otros objetos. Esto se logra mediante el uso de referencias a los objetos.

Para crear un objeto en Java, primero debemos definir una clase. La clase actúa como una plantilla o un molde a través del cual se crean los objetos. Una vez definida la clase, podemos crear objetos utilizando la palabra clave "new" seguida del nombre de la clase y los parámetros del constructor. El constructor es un método especial que se llama al crear un objeto y se utiliza para inicializar los campos del objeto.

Por ejemplo, si tenemos una clase llamada "Persona" con los campos "nombre" y "edad", podemos crear un objeto de esta clase de la siguiente manera:

```java
Persona persona1 = new Persona("Juan", 25);
```

En este caso, "persona1" es una referencia al objeto creado y podemos acceder a sus campos y métodos utilizando esta referencia.

Una vez que se ha creado un objeto, podemos acceder y modificar sus campos utilizando la sintaxis de punto. Por ejemplo:

```java
persona1.nombre = "Pedro";
persona1.edad = 30;
```

También podemos invocar los métodos del objeto de la siguiente manera:

```java
persona1.saludar();
```

Aquí, "saludar()" es un método definido en la clase "Persona" que muestra un saludo en la consola.

En resumen, los objetos en Java son instancias de clases y tienen un estado, un comportamiento y una identidad única. Pueden ser creados utilizando la palabra clave "new" y se puede acceder a sus campos y métodos utilizando referencias. Los objetos son fundamentales en Java y son la base de la programación orientada a objetos.
HERENCIA
La herencia es uno de los conceptos fundamentales de la programación orientada a objetos en Java. Permite que una clase herede los campos y métodos de otra clase, lo que facilita la reutilización de código y la creación de jerarquías de clases.

En Java, la herencia se logra mediante la utilización de la palabra clave "extends". La clase que se hereda se conoce como clase padre o superclase, y la clase que hereda se conoce como clase hija o subclase.

A continuación, se muestra un ejemplo de cómo se puede implementar la herencia en Java:

```java
// Clase Padre o Superclase
class Animal {
    String nombre;
    
    public void comer() {
        System.out.println("El animal está comiendo");
    }
}

// Clase Hija o Subclase
class Perro extends Animal {
    String raza;
    
    public void ladrar() {
        System.out.println("El perro está ladrando");
    }
}
```

En este ejemplo, la clase "Perro" hereda los campos y métodos de la clase "Animal". La clase "Perro" tiene además un campo adicional llamado "raza" y un método adicional llamado "ladrar".

Ahora, podemos crear objetos de ambas clases y acceder a sus campos y métodos:

```java
Animal animal = new Animal();
animal.nombre = "León";
animal.comer();

Perro perro = new Perro();
perro.nombre = "Max";
perro.raza = "Labrador";
perro.comer();
perro.ladrar();
```

En este caso, creamos un objeto de la clase "Animal" y otro objeto de la clase "Perro". Podemos acceder a los campos "nombre" y "raza" de los objetos y también invocar los métodos "comer()" y "ladrar()".

La herencia en Java también permite la sobreescritura de métodos. Esto significa que una subclase puede proporcionar una implementación diferente para un método heredado de la superclase.

Por ejemplo:

```java
class Animal {
    String nombre;
    
    public void hacerSonido() {
        System.out.println("El animal hace un sonido");
    }
}

class Gato extends Animal {
    public void hacerSonido() {
        System.out.println("El gato maulla");
    }
}

class Perro extends Animal {
    public void hacerSonido() {
        System.out.println("El perro ladra");
    }
}
```

En este caso, tanto la clase "Gato" como la clase "Perro" sobrescriben el método "hacerSonido()" de la clase "Animal" y proporcionan una implementación diferente.

En conclusión, la herencia en Java permite crear jerarquías de clases y reutilizar código. La clase hija hereda los campos y métodos de la clase padre y puede proporcionar su propia implementación de los métodos heredados. La herencia es un concepto fundamental de la programación orientada a objetos y es ampliamente utilizado en el desarrollo de aplicaciones Java.